buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.30'
    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.9.16'
  }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

group = 'com.jakewharton.dex'
version = '3.0.1-SNAPSHOT'

repositories {
  mavenCentral()
}

dependencies {
  compile 'com.jakewharton.android.repackaged:libcore-dex:7.1.0_r7'
  compile 'com.jakewharton.android.repackaged:dalvik-dx:7.1.0_r7'
  compile 'org.jetbrains.kotlin:kotlin-stdlib:1.2.30'
  testCompile 'junit:junit:4.12'
  testCompile 'com.google.guava:guava:19.0'
  testCompile 'com.google.truth:truth:0.28'
}

dokka {
  outputFormat 'javadoc'
  outputDirectory "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: 'dokka') {
  classifier 'javadoc'
  from "$buildDir/javadoc"
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task fatMethodsJar(type: Jar, dependsOn: 'compileJava') {
  from files(sourceSets.main.output.classesDirs)
  from configurations.compile.asFileTree.files.collect { zipTree(it) }

  classifier 'fat-methods'

  manifest {
   attributes 'Main-Class': 'com.jakewharton.dex.DexMethods'
  }
}

def binaryMethodsFile = new File(buildDir, "libs/dex-methods-list-binary.jar")
task binaryMethodsJar() {
  dependsOn(fatMethodsJar)

  inputs.file(fatMethodsJar.archivePath)
  outputs.file(binaryMethodsFile)

  doLast {
    def fatJarFile = fatMethodsJar.archivePath

    binaryMethodsFile.getParentFile().mkdirs()
    binaryMethodsFile.delete()
    binaryMethodsFile << "#!/bin/sh\n\nexec java -jar \$0 \"\$@\"\n\n"
    fatJarFile.withInputStream { binaryMethodsFile.append it }

    binaryMethodsFile.setExecutable true, false
  }
}

task copyBinaryMethods(type: Copy, dependsOn: binaryMethodsJar) {
  from(binaryMethodsFile)
  into buildDir
  rename(".*", 'dex-methods-list')
}
assemble.dependsOn(copyBinaryMethods)


task fatFieldsJar(type: Jar, dependsOn: 'compileJava') {
  from files(sourceSets.main.output.classesDirs)
  from configurations.compile.asFileTree.files.collect { zipTree(it) }

  classifier 'fat-fields'

  manifest {
   attributes 'Main-Class': 'com.jakewharton.dex.DexFields'
  }
}

def binaryFieldsFile = new File(buildDir, "libs/dex-fields-list-binary.jar")
task binaryFieldsJar() {
  dependsOn(fatFieldsJar)

  inputs.file(fatFieldsJar.archivePath)
  outputs.file(binaryFieldsFile)

  doLast {
    def fatJarFile = fatFieldsJar.archivePath

    binaryFieldsFile.getParentFile().mkdirs()
    binaryFieldsFile.delete()
    binaryFieldsFile << "#!/bin/sh\n\nexec java -jar \$0 \"\$@\"\n\n"
    fatJarFile.withInputStream { binaryFieldsFile.append it }

    binaryFieldsFile.setExecutable true, false
  }
}

task copyFieldsMethods(type: Copy, dependsOn: binaryFieldsJar) {
  from(binaryFieldsFile)
  into buildDir
  rename(".*", 'dex-fields-list')
}
assemble.dependsOn(copyFieldsMethods)

artifacts {
  archives sourcesJar
  archives javadocJar
  archives file: binaryMethodsFile, name: 'binary', type: 'jar', builtBy: binaryMethodsJar, classifier: 'binary-methods'
  archives file: binaryFieldsFile, name: 'binary', type: 'jar', builtBy: binaryFieldsJar, classifier: 'binary-fields'
}

def isReleaseBuild() {
  return version.contains("SNAPSHOT") == false
}

def getRepositoryUsername() {
  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

signing {
  required { isReleaseBuild() && gradle.taskGraph.hasTask('uploadArchives') }
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
      }
      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
      }

      pom.project {
        name 'Dex Method/Field List'
        packaging 'jar'
        description 'A simple utility which lists all method or field references in a dex file.'
        url 'https://github.com/JakeWharton/dex-method-list'

        scm {
          connection 'git@github.com:JakeWharton/dex-method-list.git'
          url 'https://github.com/JakeWharton/dex-method-list'
        }

        licenses {
          license {
            name 'Apache 2.0'
            url 'http://opensource.org/licenses/Apache-2.0'
          }
        }

        developers {
          developer {
            id 'jakewharton'
            name 'Jake Wharton'
          }
        }
      }
    }
  }
}
