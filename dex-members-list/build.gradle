apply plugin: 'java-library'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

version = '5.0.0-SNAPSHOT'

dependencies {
  implementation deps.clikt
  implementation deps.androidTools.dalvikDx
  implementation deps.kotlin.stdlibJdk8

  implementation deps.r8

  // Truth uses a newer version of Guava than R8.
  implementation deps.guava

  implementation deps.asciitable
  implementation deps.okio
  implementation deps.androidTools.binaryResources
  implementation deps.byteunits

  testImplementation deps.junit
  testImplementation deps.truth
}

dokka {
  outputFormat 'javadoc'
  outputDirectory "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: 'dokka') {
  classifier 'javadoc'
  from "$buildDir/javadoc"
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task fatMembersJar(type: Jar, dependsOn: 'compileJava') {
  from files(sourceSets.main.output.classesDirs)
  from configurations.runtimeClasspath.asFileTree.files.collect { zipTree(it) }

  classifier 'fat'

  manifest {
    attributes 'Main-Class': 'com.jakewharton.dex.DexMembers'
  }
}

def binaryMembersFile = new File(buildDir, "libs/dex-member-list-binary.jar")
task binaryMembersJar() {
  dependsOn(fatMembersJar)

  inputs.file(fatMembersJar.archivePath)
  outputs.file(binaryMembersFile)

  doLast {
    def fatJarFile = fatMembersJar.archivePath

    binaryMembersFile.getParentFile().mkdirs()
    binaryMembersFile.delete()
    binaryMembersFile << "#!/bin/sh\n\nexec java -jar \$0 \"\$@\"\n\n"
    fatJarFile.withInputStream { binaryMembersFile.append it }

    binaryMembersFile.setExecutable true, false
  }
}

task copyBinaryMembers(type: Copy, dependsOn: binaryMembersJar) {
  from(binaryMembersFile)
  into buildDir
  rename(".*", 'dex-member-list')
}
assemble.dependsOn(copyBinaryMembers)

task fatDiffuseJar(type: Jar, dependsOn: 'compileJava') {
  from files(sourceSets.main.output.classesDirs)
  from configurations.runtimeClasspath.asFileTree.files.collect { zipTree(it) }

  classifier 'fat-diffuse'

  manifest {
    attributes 'Main-Class': 'com.jakewharton.diffuse.Diffuse'
  }
}

def binaryDiffuseFile = new File(buildDir, "libs/diffuse-binary.jar")
task binaryDiffuseJar() {
  dependsOn(fatDiffuseJar)

  inputs.file(fatDiffuseJar.archivePath)
  outputs.file(binaryDiffuseFile)

  doLast {
    def fatJarFile = fatDiffuseJar.archivePath

    binaryDiffuseFile.getParentFile().mkdirs()
    binaryDiffuseFile.delete()
    binaryDiffuseFile << "#!/bin/sh\n\nexec java -jar \$0 \"\$@\"\n\n"
    fatJarFile.withInputStream { binaryDiffuseFile.append it }

    binaryDiffuseFile.setExecutable true, false
  }
}

task copyDiffuseBinary(type: Copy, dependsOn: binaryDiffuseJar) {
  from(binaryDiffuseFile)
  into buildDir
  rename(".*", 'diffuse')
}
assemble.dependsOn(copyDiffuseBinary)

artifacts {
  archives sourcesJar
  archives javadocJar
  archives file: binaryMembersFile, name: 'binary', type: 'jar', builtBy: binaryMembersJar, classifier: 'binary'
  archives file: binaryDiffuseFile, name: 'binary', type: 'jar', builtBy: binaryDiffuseJar, classifier: 'diffuse'
}

def isReleaseBuild() {
  return version.contains("SNAPSHOT") == false
}

def getRepositoryUsername() {
  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

signing {
  required { isReleaseBuild() && gradle.taskGraph.hasTask('uploadArchives') }
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
      }
      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
      }

      pom.groupId = 'com.jakewharton.dex'
      pom.artifactId = 'dex-member-list'

      pom.project {
        name 'Dex Member List'
        packaging 'jar'
        description 'A utility which lists all method and/or field references in a dex file.'
        url 'https://github.com/JakeWharton/dex-member-list'

        scm {
          connection 'git@github.com:JakeWharton/dex-member-list.git'
          url 'https://github.com/JakeWharton/dex-member-list'
        }

        licenses {
          license {
            name 'Apache 2.0'
            url 'http://opensource.org/licenses/Apache-2.0'
          }
        }

        developers {
          developer {
            id 'jakewharton'
            name 'Jake Wharton'
          }
        }
      }
    }
  }
}
